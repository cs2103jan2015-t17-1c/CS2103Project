//@author: a0108457b



	/**
	 * origin: C:\Users\Wang_Jiexuan\Desktop\EasiScheduler2103\v0.5 before submission\v0.5.1\CommandExecution.cpp
	 */

#include "CommandExecution.h"
#include "CurrentTime.h"
#include <assert.h> 
#include <exception>

using namespace std;

#define MESSAGE_SUCCESSFUL_SCHEDULE_TASK_ADDED(description) "Successfully added (Schedule Task) '" + description + "' to the schedule\r\n";
#define MESSAGE_SUCCESSFUL_DEADLINE_TASK_ADDED(description) "Successfully added (Deadline Task) '" + description + "' to the schedule\r\n";
#define MESSAGE_SUCCESSFUL_FLOATING_TASK_ADDED(description) "Successfully added (Floating Task) '" + description + "' to the schedule\r\n";
#define MESSAGE_SUCCESSFUL_UPDATED "The event is updated\r\n";
#define MESSAGE_SUCCESSFUL_UNDO "Undo is successful\r\n";
#define MESSAGE_SUCCESSFUL_REDO "Redo is successful\r\n";
#define MESSAGE_SUCCESSFUL_MARK "Event marked done\r\n";
#define MESSAGE_SUCCESSFUL_UNMARK "Event unmarked done\r\n";
#define MESSAGE_SUCCESSFUL_DELETION "Successfully deleted\r\n";
#define MESSAGE_EMPTY_CONTENT "Don't be lazy, please type something\r\n";
#define MESSAGE_INVALID_COMMAND_FORMAT "Wrong command format, plesae refer to user guide\r\n";
#define MESSAGE_INVALID_UPDATE_INPUT "Invalid UPDATE Input\r\n";
#define MESSAGE_INVALID_UNDO "Cannot undo twice\r\n";
#define MESSAGE_INVALID_ADD_INPUT "Invalid ADD Input\r\n";
#define MESSAGE_INVALID_INDEX "Invalid index\r\n";
#define MESSAGE_INVALID_REDO "Cannot redo because no UNDO command has been done\r\n";

#define INDICATOR_EMPTY_INPUT -1;

CommandExecution::CommandExecution() {
	_taskInfo.description = "";
	_taskInfo.startMonth = INDICATOR_EMPTY_INPUT;
	_taskInfo.startDay = INDICATOR_EMPTY_INPUT;
	_taskInfo.startTime = INDICATOR_EMPTY_INPUT;
	_taskInfo.startYear = INDICATOR_EMPTY_INPUT;
	_taskInfo.endTime = INDICATOR_EMPTY_INPUT;
	_taskInfo.endMonth = INDICATOR_EMPTY_INPUT;
	_taskInfo.endDay = INDICATOR_EMPTY_INPUT;
	_taskInfo.endYear = INDICATOR_EMPTY_INPUT;
}

CommandExecution::~CommandExecution() {
}


//Purpose: To check whether the command is in proper format
//Check the parameter, If the command is track, undo, redo, display, exit, no parameter should be taken in
//Otherwise, paramters should be taken in.
string CommandExecution::readCommand(string userInput) { 
	string message = "";
	string command = "";
	string content = "";
	size_t end = 0;

	try {
		verifyUserInput(userInput);
	} catch (exception &e) {
		message = e.what();
		return message;
	}

	//logging user inputs 
	loggingInput(userInput);

	command = getCommand(userInput, end);
	if(isExit(command)) {
		assert(command == "exit");
		performExit();
	} else { 
		if (isSingleWordCommand(command)) {
			if(isInvalidFormat(userInput, end)) {
				return MESSAGE_INVALID_COMMAND_FORMAT;
			} else {
				executeCommand(determineCommandType(command), message, "");
			}
		} else {
			if(end == string::npos) {
				return MESSAGE_INVALID_COMMAND_FORMAT;
			} else {
				content = retrieveContent(userInput, end);
				if(isEmptyContent(content)) {
					return MESSAGE_EMPTY_CONTENT;
				} else {
					executeCommand(determineCommandType(command), message, content);
				}
			}
		}
	}
	return message;
}

void CommandExecution::loggingInput(string userInput) {
	_log.logUserInput(userInput);
}

bool CommandExecution::isInvalidFormat(string userInput, size_t end) {
	return _checker.isInvalidCommandFormat(userInput, end);
}




string CommandExecution::getCommand(string userInput, size_t & end) {
	return _checker.getCommand(userInput, end);
}



bool CommandExecution::isExit(string command) {
	return _checker.isExitCommand(command);
}



bool CommandExecution::isSingleWordCommand(string command) {
	return _checker.isSingleWordCommand(command);
}



bool CommandExecution::isEmptyContent(string content) {
	return _checker.isEmptyContent(content);
}



string CommandExecution::retrieveContent(string userInput, size_t end) {
	return _checker.getContent(userInput, end);
}



CommandExecution::StandardCommand const CommandExecution::determineCommandType(string command){
	if (_checker.isAddCommand(command)){
		return StandardCommand::ADD;
	}
   
	if (_checker.isDeleteCommand(command)){
		return StandardCommand::DEL;
	}

	if (_checker.isUpdateCommand(command)) {
		return StandardCommand::UPDATE;
	}

	if (_checker.isDisplayCommand(command)) {
		return StandardCommand::DISPLAY;
	}
	if(_checker.isSearchCommand(command)) {
		return StandardCommand::SEARCH;
	}

	if(_checker.isLocationCommand(command)) {
		return StandardCommand::LOCATION;
	}
						
	if(_checker.isUndoCommand(command)) {
		return StandardCommand::UNDO;
	}

	if(_checker.isRedoCommand(command)) {
		return StandardCommand::REDO;
	}

	if(_checker.isMarkCommand(command)) {
		return StandardCommand::MARK;
	}

	if(_checker.isUnmarkCommand(command)) {
	    return StandardCommand::UNMARK;
	}
	
	if(_checker.isTrackCommand(command)) {
		return StandardCommand::TRACK;
	}

	return 	StandardCommand::INVALID;	
}



void CommandExecution::executeCommand(StandardCommand commandType, string& message, string content) {
	 switch (commandType) {

        case ADD:{
            performAdd(message, content);
			_tasks.sortTasks();
			saveInFile();
            break;
        }

        case DISPLAY:{
 			_tasks.sortTasks();
			performDisplay(message);
			saveInFile();
            break;
        }

        case DEL:{
            performDelete(message, content);
			_tasks.sortTasks();
			saveInFile();
            break;
        }

        case UPDATE:{
            performUpdate(message, content);
			_tasks.sortTasks();
			saveInFile();
			break;
        }

		case UNDO:{
			performUndo(message);
			_tasks.sortTasks();
			saveInFile();
			break;
		}

		case REDO:{
			performRedo(message);
			_tasks.sortTasks();
			saveInFile();
			break;
		}

        case MARK:{
            performMark(message, content);
			saveInFile();
            break;
        }

		case UNMARK:{
            performUnmark(message, content);
			saveInFile();
            break;
        }

        case INVALID:{
            performInvalidMessage(message);
            break;
        } 

		case SEARCH:{
			performSearch(message, content);
			break;
		}

		case LOCATION:{
			performLocation(message, content);
			break;
		}

		case TRACK:{
			_tasks.sortTasks();
			performTrack(message);
			saveInFile();
			break;
		}

        default:
            break;
    }
}



void CommandExecution::performInvalidMessage(string& message){
	message = MESSAGE_INVALID_COMMAND_FORMAT;
}
	

void CommandExecution::performAdd(string& message, string content){
	try {
		verifyTotalUnit();
	} catch (exception &e) {
		message = e.what();
		return;
	}

	_adder.convert(content);
	if(_adder.getIsValidInput() && _adder.isEndTimeLaterThanStartTime()){
		storeInTaskInfo();
		saveTaskLists();
		addEventToList();
		message = getAddResult(getStartYear(), getEndYear(), getDescription());
		_adder.reset();
	} else {
		message = MESSAGE_INVALID_ADD_INPUT;
		_adder.reset();
	}
}

void CommandExecution::storeInTaskInfo() {
	_taskInfo.description = _adder.getDescription();
	_taskInfo.startMonth = _adder.getStartMonth();
	_taskInfo.endMonth = _adder.getEndMonth();
	_taskInfo.startDay = _adder.getStartDay();
	_taskInfo.endDay = _adder.getEndDay();
	_taskInfo.startTime = _adder.getStartTime();
	_taskInfo.endTime = _adder.getEndTime();
	_taskInfo.startYear=_adder.getStartYear();
	_taskInfo.endYear=_adder.getEndYear();
}



void CommandExecution::addEventToList() {
	_tasks.addTask(_taskInfo.description, _taskInfo.startTime,_taskInfo.startDay,_taskInfo.startMonth,_taskInfo.startYear,  _taskInfo.endTime, _taskInfo.endDay, _taskInfo.endMonth,_taskInfo.endYear);
	_tasks.setUndoStatus(false);
}

//Purpose: To determine the type of the added task
string CommandExecution::getAddResult(int startYear, int endYear, string description) {
	if(isScheduleTask(startYear, endYear)) {
		return MESSAGE_SUCCESSFUL_SCHEDULE_TASK_ADDED(description); 
	} else {
		if(isDeadlineTask(startYear, endYear)) {
			return MESSAGE_SUCCESSFUL_DEADLINE_TASK_ADDED(description);
		} else {
			return MESSAGE_SUCCESSFUL_FLOATING_TASK_ADDED(description);
		}
	}
}

bool CommandExecution::isScheduleTask (int startYear, int endYear){
    return _tasks.isScheduleTask(startYear, endYear);
}

bool CommandExecution::isDeadlineTask (int startYear, int endYear){
	return _tasks.isDeadlineTask(startYear, endYear);
}

void CommandExecution::performDelete(string& message, string content) {
	if(!isdigit(content[0])){
		message = MESSAGE_INVALID_INDEX; 
	} else {
        int index = stoi(content.c_str());
	    saveTaskLists();
        if(_tasks.isValidIndex(index)){
			assert(index > 0);
			_tasks.deleteTask(index);
		    _tasks.setUndoStatus(false);
		    message = MESSAGE_SUCCESSFUL_DELETION;
	    } else {
			message = MESSAGE_INVALID_INDEX; 
	    }
	}

}



void CommandExecution::performUpdate(string& message, string userInput) {
	int index = 0;
	string updatedContent = "";

	seperateInputForUpdate(userInput, index, updatedContent);
	if(isValidIndex(index)) {
		if(isEmptyContent(updatedContent)){
			message = MESSAGE_EMPTY_CONTENT;
		} else {
			_adder.convert(updatedContent);
			if(_adder.getIsValidInput()){
				assert(index > 0);
				if(isUpdatedToTasks(index)){
					message = MESSAGE_SUCCESSFUL_UPDATED;
					_adder.reset();
				} else {
					message = MESSAGE_INVALID_UPDATE_INPUT;
				}
			} else {
				message = MESSAGE_INVALID_UPDATE_INPUT;
			}
		} 
	} else {
		message = MESSAGE_INVALID_INDEX;
	}
}


void CommandExecution::seperateInputForUpdate(string userInput, int& index, string& updatedContent) {
	_checker.seperateContent(userInput, index, updatedContent);
}


bool CommandExecution::isUpdatedToTasks(int index) {
	storeInTaskInfo();
    saveTaskLists();
	_tasks.setUndoStatus(false);
    return (_tasks.isUpdatedTask(index, _taskInfo.description, _taskInfo.startTime,_taskInfo.startDay,_taskInfo.startMonth,_taskInfo.startYear,  _taskInfo.endTime, _taskInfo.endDay, _taskInfo.endMonth,_taskInfo.endYear));  
}

void CommandExecution::performDisplay(string& message) {
	message = _tasks.getDisplayTasks();
}



void CommandExecution::performSearch(string& message, string content){
	message = _tasks.getSearchTask(content);
}



void CommandExecution::saveInFile(){
    _tasks.writeIntoFile();
}



void CommandExecution::performLocation(string& message, string content){
	message = _tasks.getChangeFileLocation(content);
}

bool CommandExecution::isUndoAlready(){
    if (_tasks.isUndoStatus()){
        return true;
    } else {
        return false;
    }
}


void CommandExecution::performUndo(string& message){
	if (isUndoAlready()){
		message = MESSAGE_INVALID_UNDO;
	} else {
		_tasks.undoCommand();
		_tasks.setUndoStatus(true);
		message = MESSAGE_SUCCESSFUL_UNDO;  
	}

}



void CommandExecution::performRedo(string& message){
	if (!isUndoAlready()){
		message = MESSAGE_INVALID_REDO;
	} else {
	    _tasks.undoCommand();
		_tasks.setUndoStatus(false);
		message = MESSAGE_SUCCESSFUL_REDO;  
	}
}



void CommandExecution::saveTaskLists(){
	_tasks.copyTaskLists();
}



void CommandExecution::performExit(){
	_tasks.operateExit();
}



void CommandExecution::performMark(string& message, string content){
	if(!isdigit(content[0])){
		message = MESSAGE_INVALID_INDEX;
	}else{
	    int index = stoi(content.c_str());
        saveTaskLists();
		if(_tasks.isValidIndex(index)){
			assert(index > 0);
			_tasks.operateMark(index);
		    _tasks.setUndoStatus(false);
		    message = MESSAGE_SUCCESSFUL_MARK;
		} else {
		    message = MESSAGE_INVALID_INDEX;
		}
	}
}



void CommandExecution::performUnmark(string& message, string content){
	if(!isdigit(content[0])){
		message = MESSAGE_INVALID_INDEX; 
	} else {
		int index=stoi(content.c_str());
		if(_tasks.isValidIndex(index)) {  
			assert(index > 0);
		    _tasks.operateUnmark(index);
			saveTaskLists();
		    _tasks.setUndoStatus(false);
		    message = MESSAGE_SUCCESSFUL_UNMARK;
		} else {
			message = MESSAGE_INVALID_INDEX;
		}
	}
	
}



void CommandExecution::performTrack(string& message){
	message = _tasks.getTrackTasks();
}


void CommandExecution::verifyUserInput(string userInput) {
	_checker.verifyLengthOfUserInput(userInput);
}

void CommandExecution::verifyTotalUnit() {
	_tasks.verifyTotalUnit();
}


//new function for unit testing

int CommandExecution::getStartYear(){
	return _taskInfo.startYear;
}

int CommandExecution::getEndYear(){
	return _taskInfo.endYear;
}

string CommandExecution::getDescription() {
	return _taskInfo.description;
}


bool CommandExecution::isValidIndex(int index) {
	return _tasks.isValidIndex(index);
}


// For UI
string CommandExecution::readRecentTask(int index){
	return _tasks.getReadTask(index);
}





	// End of segment: C:\Users\Wang_Jiexuan\Desktop\EasiScheduler2103\v0.5 before submission\v0.5.1\CommandExecution.cpp





	/**
	 * origin: C:\Users\Wang_Jiexuan\Desktop\EasiScheduler2103\v0.5 before submission\v0.5.1\CommandExecution.h
	 */

#include "CommandChecker.h"
#include "SmartAdder.h"
#include "EasiStorage.h"
#include "Logger.h"

using namespace std;

class CommandExecution
{
private:
	CommandChecker _checker;
	EasiStorage _tasks;
	SmartAdder _adder;
	Logger _log;
	struct TaskInfo {
		string description;
		int startTime;
		int startDay;
		int startMonth;
		int startYear;
		int endTime;
		int endDay;
		int endMonth;
		int endYear;
	} ;
	TaskInfo _taskInfo;
	
public:
	
	CommandExecution();
	~CommandExecution();

	enum StandardCommand { 
		ADD, DEL, DISPLAY, UPDATE, SEARCH, EXIT, INVALID, LOCATION, UNDO, REDO, MARK, UNMARK,TRACK
	};

	string retrieveContent(string, size_t);
	string readCommand(string);
	string getCommand(string, size_t &);
	string getAddResult(int, int, string);
	string getDescription();

	//This function is for UI to display recent tasks
	string readRecentTask(int index);
	
	StandardCommand const determineCommandType(string);
	void loggingInput(string);
	void verifyUserInput(string);
	void verifyTotalUnit();

	
    void executeCommand(StandardCommand, string &, string);
	void performAdd(string &, string);
	void performDisplay(string &);
	void performUpdate(string &, string);
	void performDelete(string &, string);
	void performUndo(string &);
	void performRedo(string &);
	void performInvalidMessage(string &);
	void performExit();
	void performLocation(string &, string);
	void performMark(string &, string);
	void performUnmark(string &, string);
	void performTrack(string &);
	void performSearch(string &, string);
	void storeInTaskInfo();
	void addEventToList();
	void saveInFile();
	void saveTaskLists(); 
	void seperateInputForUpdate(string, int &, string &);
    
    bool isScheduleTask (int, int);
    bool isDeadlineTask (int, int);   
    bool isUndoAlready();
	bool isExit(string);
	bool isInvalidFormat(string, size_t);
	bool isSingleWordCommand(string);
	bool isEmptyContent(string);
    bool isValidIndex(int);
	bool isUpdatedToTasks(int);

	int getStartYear();
	int getEndYear();
	
	
	
};

	// End of segment: C:\Users\Wang_Jiexuan\Desktop\EasiScheduler2103\v0.5 before submission\v0.5.1\CommandExecution.h





	/**
	 * origin: C:\Users\Wang_Jiexuan\Desktop\EasiScheduler2103\v0.5 before submission\v0.5.1\Task.cpp
	 */

#include "Task.h"


#define EMPTY_TIME_INPUT -1;
#define EMPTY_EVENT "empty event";
 
Task::Task(){
    _startTime = EMPTY_TIME_INPUT;
    _endTime = EMPTY_TIME_INPUT;
    _eventdescription = EMPTY_EVENT;
    _startDay = EMPTY_TIME_INPUT;
    _startMonth = EMPTY_TIME_INPUT;
    _startYear = EMPTY_TIME_INPUT;
	_endDay = EMPTY_TIME_INPUT;
	_endMonth = EMPTY_TIME_INPUT;
	_endYear = EMPTY_TIME_INPUT;
	_unit = -1;
	_mark = 0;
	_overdue = 0;
}

Task::Task(string eventdescription,  int starttime, int startday, int startmonth, int startyear, int endtime, int endday, int endmonth, int endyear,int unit, int mark,int overdue){
    _startTime = starttime;
    _endTime = endtime;
    _eventdescription = eventdescription;
    _startDay = startday;
    _startMonth = startmonth;
    _startYear = startyear;
	_endDay = endday;
	_endMonth = endmonth;
	_endYear = endyear;
	_unit = unit;
	_mark = mark;
	_overdue = overdue;

}

Task::Task(string eventdescription,  int starttime, int startday, int startmonth, int startyear, int endtime, int endday, int endmonth, int endyear,int unit){
    _startTime = starttime;
    _endTime = endtime;
    _eventdescription = eventdescription;
    _startDay = startday;
    _startMonth = startmonth;
    _startYear = startyear;
	_endDay = endday;
	_endMonth = endmonth;
	_endYear = endyear;
	_unit = unit;
	_mark = 0;
	_overdue = 0;
}

string Task::getEventInformation(){
	return _eventdescription;
}
int Task::getEndTime(){
     return _endTime;
 }
    
	
int Task::getEndDay(){
    return _endDay;
}
    
int Task::getEndMonth(){
    return _endMonth;
}

   
int Task::getEndYear(){
    return _endYear;
}
	
int Task::getStartTime(){
    return _startTime;
}
    
    
int Task::getStartDay(){
    return _startDay;
}
    
    
int Task::getStartMonth(){
    return _startMonth;
}
   
int Task::getStartYear(){
    return _startYear;
}
	
int Task::getUnit(){
	return _unit;
}
    
int Task::getMark(){
	return _mark;
}

int Task::getOverdue(){
	return _overdue;
}

 void Task::setEventInformation(string eventdescription){
    _eventdescription = eventdescription;
}
    
   
 void Task::setEndTime(int endtime){
    _endTime = endtime;
}
    
 void Task::setEndDay(int endday){
    _endDay = endday;
}
    
    
 void Task::setEndMonth(int endmonth){
    _endMonth = endmonth;
}

    
 void Task::setEndYear(int endyear){
    _endYear = endyear;
}
   
 void Task::setStartTime(int starttime){
    _startTime = starttime;
}
    
    
 void Task::setStartDay(int startday){
    _startDay = startday;
}
    
    
 void Task::setStartMonth(int startmonth){
    _startMonth = startmonth;
}

    
 void Task::setStartYear(int startyear){
    _startYear = startyear;
}

	
 void Task::setMark(int mark){
	_mark = mark;
}
    
 void Task::setUnmark(int unmark){
	_mark = unmark;
}

 void Task::setOverdue(int overdue){
     _overdue = overdue;
 }
	// End of segment: C:\Users\Wang_Jiexuan\Desktop\EasiScheduler2103\v0.5 before submission\v0.5.1\Task.cpp





	/**
	 * origin: C:\Users\Wang_Jiexuan\Desktop\EasiScheduler2103\v0.5 before submission\v0.5.1\Task.h
	 */

class Task{
private:

    int _startTime;
    int _endTime;
    string _eventdescription;
    int _startDay;
    int _startMonth;
    int _startYear;
	int _endDay;
	int _endMonth;
	int _endYear;
	int _unit;
	int _mark;
	int _overdue;

public:
 
    Task();
    
	//when mark is given
    Task(string eventdescription,  int starttime, int startday, int startmonth, int startyear, int endtime, int endday, int endmonth, int endyear,int unit, int mark, int overdue);
	
	//when mark is default and is not given	   
	Task(string eventdescription,  int starttime, int startday, int startmonth, int startyear, int endtime, int endday, int endmonth, int endyear,int unit);

    string getEventInformation();
    int getEndTime();    
	int getEndDay();  
    int getEndMonth();
    int getEndYear();
    int getStartTime();    
    int getStartDay();    
    int getStartMonth();
    int getStartYear();
	int getUnit();
    int getMark();
	int getOverdue();


    void setEventInformation(string eventdescription);
    void setEndTime(int endtime);
    void setEndDay(int endday);
    void setEndMonth(int endmonth);
    void setEndYear(int endyear);
    void setStartTime(int starttime);
    void setStartDay(int startday);
    void setStartMonth(int startmonth);
    void setStartYear(int startyear);
	void setMark(int mark);
    void setUnmark(int unmark);
	void setOverdue(int overdue);

    
};




	// End of segment: C:\Users\Wang_Jiexuan\Desktop\EasiScheduler2103\v0.5 before submission\v0.5.1\Task.h





	/**
	 * origin: C:\Users\Wang_Jiexuan\Desktop\EasiScheduler2103\v0.5 before submission\UnitAndIntegrationTest\Testing.cpp
	 */

#include "stdafx.h"
#include "CppUnitTest.h"
#include "CommandExecution.cpp"
#include "SmartAdder.cpp"
#include "CommandChecker.cpp"
#include "EasiStorage.cpp"
#include "Task.cpp"
#include "CurrentTime.cpp"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace UnitTestLogic {	

	TEST_CLASS(UnitTestReadCommand)
	{
	public:
		TEST_METHOD(TestGetCommand) {
			remove("EasiScheduler.txt");
			CommandExecution test;
			size_t endExpected;
			size_t endActual;
			string expected;
			string actual;

			expected = "add";
			endExpected = 3;
			actual = test.getCommand("add something", endActual);
			Assert::AreEqual(expected, actual);
			Assert::AreEqual(endExpected, endActual);
		}	

		TEST_METHOD(TestIsExit) {
			CommandExecution test;
			Assert::AreEqual(true, test.isExit("exit"));
			Assert::AreNotEqual(true, test.isExit("notExit"));
		}

		TEST_METHOD(TestIsSingleWordCommand) {
			CommandExecution test;
			Assert::AreEqual(true, test.isSingleWordCommand("display"));
			Assert::AreEqual(true, test.isSingleWordCommand("track"));
			Assert::AreEqual(true, test.isSingleWordCommand("undo"));
			Assert::AreEqual(true, test.isSingleWordCommand("redo"));
			Assert::AreNotEqual(true, test.isExit("add"));
		}

		TEST_METHOD(TestIsInvalidFormat) {
			CommandExecution test;
			size_t end = string::npos;
			//test end == npos which is valid format condition 
			Assert::AreEqual(false, test.isInvalidFormat("display", end));
			//test end != npos, but find_first_not_of(" ") == npos which is valid format condition 
			Assert::AreEqual(false, test.isInvalidFormat("display    ", 7));
			//test satisfy both  invalid condtions
			Assert::AreEqual(true, test.isInvalidFormat("display 1", 7));
		}


		TEST_METHOD(TestDetermineCommandType) {
			CommandExecution test;
			bool actual = false;
			//test enum
			if(test.determineCommandType("add") == test.ADD) {
				actual = true;
			}
			Assert::AreEqual(true, actual);

			actual = false;
			if(test.determineCommandType("haha") == test.INVALID) {
				actual = true;
			}
			Assert::AreEqual(true, actual);
		}

		TEST_METHOD(TestRetrieveContent) {
			CommandExecution test;
			string dummy;
			string expected = "test case 1 -st 1000am -et 0300pm";
			string actual = test.retrieveContent("add test case 1 -st 1000am -et 0300pm", 3);
		
			Assert::AreEqual(expected, actual);

			expected = "   ";
			actual = test.retrieveContent("add    ", 3);
			Assert::AreEqual(expected, actual);


			expected = "12";
			
			actual = test.retrieveContent("delete 12", 6);
			Assert::AreEqual(expected, actual);
		} 


		TEST_METHOD(TestIsEmptyContent) {
			CommandExecution test;
			Assert::AreEqual(true, test.isEmptyContent("    "));
			Assert::AreNotEqual(true, test.isEmptyContent("   a "));
		}


		TEST_METHOD(TestWrongCommandFormat) {
			CommandExecution test;
			string expected = "Wrong command format, plesae refer to user guide\r\n";
			string actual = test.readCommand("add");
			Assert::AreEqual(expected, actual);

			actual = test.readCommand("display 1");
			Assert::AreEqual(expected, actual);

			actual = test.readCommand("plus hello");
			Assert::AreEqual(expected, actual);
			
		}

		TEST_METHOD(TestEmptyContentMessage) {
			CommandExecution test;
			string expected = "Don't be lazy, please type something\r\n";
			string actual = test.readCommand("add ");
			Assert::AreEqual(expected, actual);

			actual = test.readCommand("delete    ");
			Assert::AreEqual(expected, actual);
		}

		
	};
	
	// End of segment: C:\Users\Wang_Jiexuan\Desktop\EasiScheduler2103\v0.5 before submission\UnitAndIntegrationTest\Testing.cpp





	/**
	 * origin: C:\Users\Wang_Jiexuan\Desktop\EasiScheduler2103\v0.5 before submission\UnitAndIntegrationTest\Testing.cpp
	 */

		TEST_METHOD(TestValidMarkAndUnmark) {
			CommandExecution test;
			string dummy;
			string actual;
			string expectedMark = "Event marked done\r\n";
			string expectedUnmark = "Event unmarked done\r\n";

			test.performAdd(dummy, "test case");
			test.performMark(actual, "1");
			Assert::AreEqual(expectedMark, actual);
			
			test.performUnmark(actual, "1");
			Assert::AreEqual(expectedUnmark, actual);
		}

		TEST_METHOD(TestMarkAndUnmarkFunctionality) {
			
			CommandExecution test;
			string dummy;
			string actual;
			string expected = "Schedule is empty\r\n";

			test.performAdd(dummy, "test case");
			test.performDisplay(actual);

			//since added a task, schedule is displaying the task 'test case'
			Assert::AreNotEqual(expected, actual);

			//mark and the marked event will go to track list, so there is nothing to display
			test.performMark(dummy, "1");
			test.performDisplay(actual);
			Assert::AreEqual(expected, actual);
			
			//unmark and the event will come back showing in display mode
			test.performUnmark(dummy, "1");
			test.performDisplay(actual);
			Assert::AreNotEqual(expected, actual);
		
		}
	};


	TEST_CLASS(UnitTestPerformTrack)
	{
	public:
		
		TEST_METHOD(TestTrackingFunctionality) {
			CommandExecution test;
			string expected = "Tracking:\r\n";
			string dummy;
			string actual;
			test.performAdd(dummy, "test case 1 -st 2015 April 16 0800am -et 2015 April 17 1000pm");
			test.performAdd(dummy, "test case 2 -et 2016 December 8 0100pm");
			test.performAdd(dummy, "test case 3");

			//initially no tasks in tracking list
			test.performTrack(actual);
			Assert::AreEqual(expected, actual);

			//mark events
			expected = "Tracking:\r\nUnit No.0001 2015/04/16/0800 - 2015/04/17/2200     Event: test case 1\r\nUnit No.0002 ****/**/**/**** - 2016/12/08/1300     Event: test case 2\r\nUnit No.0003 ****/**/**/**** - ****/**/**/****     Event: test case 3\r\n";
			test.performMark(dummy, "1");
			test.performMark(dummy, "2");
			test.performMark(dummy, "3");
			test.performTrack(actual);
			Assert::AreEqual(expected, actual);

			//unmark events
			test.performUnmark(dummy, "1");
			test.performUnmark(dummy, "2");
			test.performUnmark(dummy, "3");
			expected = "Tracking:\r\n";
			test.performTrack(actual);
			Assert::AreEqual(expected, actual);
		}
	};

	// End of segment: C:\Users\Wang_Jiexuan\Desktop\EasiScheduler2103\v0.5 before submission\UnitAndIntegrationTest\Testing.cpp





